#
#  Copyright (C) 2015 Google, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at:
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

declare_args() {
  libhw_include_path = ""
  core_include_path = ""
  audio_include_path = ""
  libchrome_include_path = ""
  bt_include_path = ""
  btif_include_path = ""
  stack_include_path = ""
  types_include_path = ""
  utils_include_path = ""
  mtk_bt_include_path = ""
  storage_path = ""
  conf_path = ""
  platform_libs_path = ""
  bt_sys_log_flag = ""
  bt_tmp_path = ""
  bt_misc_path = ""
  bt_etc_path = ""
  rpc_dbg_flag = ""
  stack_root_path = ""
  enable_ble_mesh = ""
  bt_c4a_ble_setup_flag = ""
  enable_ipcd = ""
  ipcd_link = ""
  enable_sink_lowpower = ""
}

assert(libhw_include_path != "", "libhw_include_path build argument wasn't provided.")
assert(core_include_path != "", "core_include_path build argument wasn't provided.")
assert(audio_include_path != "", "audio_include_path build argument wasn't provided.")
assert(libchrome_include_path != "", "libchrome_include_path build argument wasn't provided.")
assert(bt_include_path != "", "bt_include_path build argument wasn't provided.")
assert(btif_include_path != "", "btif_include_path build argument wasn't provided.")
assert(stack_include_path != "", "stack_include_path build argument wasn't provided.")
assert(types_include_path != "", "types_include_path build argument wasn't provided.")
assert(utils_include_path != "", "utils_include_path build argument wasn't provided.")
assert(mtk_bt_include_path != "", "mtk_bt_include_path build argument wasn't provided.")
assert(storage_path != "", "storage_path build argument wasn't provided.")
assert(conf_path != "", "conf_path build argument wasn't provided.")
assert(platform_libs_path != "", "storage_path build argument wasn't provided.")

assert(bt_tmp_path != "", "bt_tmp_path build argument wasn't provided.")
assert(bt_misc_path != "", "bt_misc_path build argument wasn't provided.")
assert(bt_etc_path != "", "bt_etc_path build argument wasn't provided.")
assert(stack_root_path != "", "stack_include_path build argument wasn't provided.")

config("default_include_dirs") {
  include_dirs = [
    "//inc",
    "//inc/hardware",
    storage_path,
    platform_libs_path,
    libhw_include_path,
    core_include_path,
    audio_include_path,
    libchrome_include_path,
    bt_include_path,
    btif_include_path,
    stack_include_path,
    types_include_path,
    utils_include_path,
    mtk_bt_include_path,
    stack_root_path,
  ]
}

config("linux") {
  # TODO(keybuk): AndroidConfig.h or equivalent

  cflags = [
    "-Wall",
    #"-Werror",
    "-g",
    "-O0",
    "-fpic",
    "-fdata-sections",
    "-ffunction-sections",
    "-fvisibility=hidden",
    "-DHAS_MDROID_BUILDCFG",
    "-DMTK_BT_COMMON",
    "-Wformat=2",
    "-Wformat-security",
    "-fstack-protector-strong",
    "-Wl,-z,noexecstack",
#    "-Wl,-z,noexecheap",
    "-Wl,-z,relro",
    "-Wl,-z,now",
    bt_sys_log_flag,
    rpc_dbg_flag,
    enable_ipcd,
    bt_c4a_ble_setup_flag,
    enable_sink_lowpower,
  ]

  ldflags = [
    "-Wformat=2",
    "-Wformat-security",
    "-fstack-protector-strong",
    "-Wl,-z,noexecstack",
#    "-Wl,-z,noexecheap",
    "-Wl,-z,relro",
    "-Wl,-z,now",
  ]

  cflags_c = [ "-std=c99" ]

  cflags_cc = [
#TODO(jpawlowski): we should use same c++ version as Android, which is c++11,
# but we use some c++14 features. Uncomment when this get fixed in code.:
    "-std=c++1y",
    "-fno-exceptions",
  ]

  defines = [
#    "_FORTIFY_SOURCE=2",
    "_GNU_SOURCE",
    "HAS_NO_BDROID_BUILDCFG",
    "LOG_NDEBUG=1",
    "EXPORT_SYMBOL=__attribute__((visibility(\"default\")))",
    "KERNEL_MISSING_CLOCK_BOOTTIME_ALARM=TRUE",

    # This is a macro to that can be used by source code to detect if the
    # current build is done by GN or via Android.mk. This is a temporary
    # workaround until we can remove all Android-specific dependencies.
    "OS_GENERIC",
    "MTK_LINUX",
    #"MTK_GATT_BEARER_SUPPORT",
    "MW_STORAGE_PATH=\"$storage_path\"",
    "CONFIG_PATH=\"$conf_path\"",
    "PLATFORM_LIB_PATH=\"$platform_libs_path\"",
    "BT_TMP_PATH=\"$bt_tmp_path/\"",
    "BT_MISC_PATH=\"$bt_misc_path/\"",
    "BT_ETC_PATH=\"$bt_etc_path/\"",
  ]
}

config("pic") {
  cflags = [ "-fPIC" ]
}

config("gc") {
  ldflags = [ "-Wl,--gc-sections" ]
}
